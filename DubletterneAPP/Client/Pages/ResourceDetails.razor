@page "/resources/{ResourceId:int}"
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IModalService Modal

@using System;
@using System.IO;
@using System.Net;


<div style="width:100%;"> <!-- Main Div -->
    <div class="left-column" style="float:left; width:20%;"> <!-- Left Column -->
        <div class="form-group">
            <div class="img-container">
                <img class="resource-img" src="@resource.ImageUrl" alt=""> 
            </div>
            <button type="button" class="btn btn-primary" @onclick="Edit">Edit</button> <br>
            <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button> <br>
            <button type="button" class="btn btn-secondary" @onclick="Back">Back</button> <br>
        </div>
    </div>
    <div class="right-column"> <!-- Right Column -->
        @if (resource != null)
        {
            <h1> @resource.Title</h1>
            <hr> 
            <div class="resource-info">
                <p>
                    Created by user: <a href="@NavigationManager.BaseUri/users/@resource.User.Id">@resource.User.UserName</a>, at @resource.Created <br>
                    Last updated: @resource.Updated
                </p>
            </div>
            
            <div class="resource-content-container" >
                <p class="paragraphs-info"> Description:</p> 
                <div class="resource-content"> 
                @foreach (var paragraph in resource.TextParagraphs)
                {
                    <p class="paragraphs">@paragraph</p>
                }
                </div>
            </div>
        }
    </div>
</div>

<style>

    .img-container {
        height: 300px;
        width: 70%;
        margin-bottom: 2em;
    }

    .img-container img {
        display: inline-flex;
        height: fit-content;
        width: fit-content;
        max-height: 100%;
        max-width: 100%;
    }

    .form-group {
        display: inline-flex;
        flex-direction: column;
        align-items: center;
    }

    .left-column button {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 150px;
    }

    .right-column {
        float:left;
        width:80%;
        margin-left;10px
        padding-right: 3%;
    }

    .resource-content-container {
        display: block;
        justify-content: left;
        max-width: 100%;
    }

    .resource-content {
        border: 1px solid grey;
    }

    .paragraphs-info {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .paragraphs {
        padding-left: 1%;
        padding-right: 1%;
        padding-top: 1%;
    }
</style>

@code {
    [Parameter]
    public int? ResourceId { get; set; }

    private ResourceDetailsDTO? resource;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
             if (ResourceId != 0)
            {
                resource = await Http.GetFromJsonAsync<ResourceDetailsDTO>($"api/resources/{ResourceId}");
            }

            await base.OnParametersSetAsync();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
            resource = new ResourceDetailsDTO {
                Id = 1,
                Title = "Title",
                Created = DateTime.Today,
                Updated = DateTime.Today,
                TextParagraphs = new List<string>{"Hello", "there"},
                ImageUrl = "image.com"
            };

        }
    }

    private void Edit()
    {
        var uri = $"{NavigationManager.BaseUri}resources/{ResourceId}/edit";

        NavigationManager.NavigateTo(uri);
    }

    private async Task Delete()
    {
        var title = resource.Title;
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the resource?"))
        {
            await Http.DeleteAsync($"api/Resources/{ResourceId}");

            var uri = $"{NavigationManager.BaseUri}resources";

            NavigationManager.NavigateTo(uri);
        }
        ShowDeletePopup(title, DateTime.Now);
    }

    void ShowDeletePopup(string title, DateTime deleteTime)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeletePopup.ResourceTitle), title);
        parameters.Add(nameof(DeletePopup.DeleteTime), deleteTime);

        Modal.Show<DeletePopup>("Resource Deleted", parameters);
    }

    private void Back()
    {
        var uri = $"{NavigationManager.BaseUri}resources";

        NavigationManager.NavigateTo(uri);
    }
}
