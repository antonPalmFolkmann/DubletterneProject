@page "/users/{UserId:int}"
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



<div class="user-info-column"> <!-- Right Column -->
    @if (user != null)
    {
        <h1> @user.FirstName @user.LastName</h1>
        <hr> 
        <div class="user-info">
            <p>
                <h3> User information: </h3>
                Username: @user.UserName <br>
                Email: @user.Email <br>
                Member since: @user.Created
            </p> 
        </div>
        
        <div class="user-content-container" >
            <p class="resource-info"> Resources:</p> 
            <div class="resource-content"> 
            @foreach (var resource in resources)
            {
                <a href="@NavigationManager.BaseUri/resources/@resource.Id"><p class="resources">@resource.Title</p></a>
            }
            </div>
        </div>
    
        <div class="buttons-group">
            <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button> <br>
            <button type="button" class="btn btn-secondary" @onclick="Back">Back</button> <br>
        </div>
    }
</div>

<style>
    .buttons-group {
        display: inline-flex;
        flex-direction: column;
        align-items: center;
    }

    .buttons-group button {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 150px;
        margin-top: 10px;
    }

    .user-info-column {
        float:left;
        width:100%;
        padding-left: 3%;
        padding-right: 3%;
    }

    .user-content-container {
        display: block;
        justify-content: left;
        max-width: 100%;
    }

    .resource-content {
        border: 1px solid grey;
    }

    .resource-info {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .resources {
        padding-left: 1%;
        padding-right: 1%;
        padding-top: 1%;
    }
</style>


@code {
    [Parameter]
    public int? UserId { get; set; }

    private UserDetailsDTO? user;

    private ResourceDTO[]? resources;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
             if (UserId != 0)
            {
                user = await Http.GetFromJsonAsync<UserDetailsDTO>($"api/users/{UserId}");
                resources = await Http.GetFromJsonAsync<ResourceDTO[]>($"api/resources/{user.UserName}");
            }

            await base.OnParametersSetAsync();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
            user = new UserDetailsDTO {
                Id = 1,
                FirstName = "Harry",
                LastName = "Potter",
                UserName = "TBWL",
                Created = DateTime.Today,
                Updated = DateTime.Today,
                Email = "TBWL@diagonal.com",
                Resources = new List<string>{"Hello", "there"}
            };

        }
    }

    private async Task Delete()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the user?"))
        {
            await Http.DeleteAsync($"api/Users/{UserId}");

            var uri = $"{NavigationManager.BaseUri}users";

            NavigationManager.NavigateTo(uri);
        }
    }

    private void Back()
    {
        var uri = $"{NavigationManager.BaseUri}users";

        NavigationManager.NavigateTo(uri);
    }
}


