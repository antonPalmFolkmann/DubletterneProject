@page "/resources/create"
@using Infrastructure
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider

<h1>Create Resource</h1>

<hr />

<EditForm Model="@resource" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" @bind-Value="resource.Title" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Created">Created</label>
        <InputDate id="Created" @bind-Value="resource.Created" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Text">Text</label>
        <InputTextArea @bind-Value="TextParagraphs" class="form-control" rows="5" />
    </div>
    <div class="form-group">
        <label for="Image URL">Image URL</label>
        <InputText id="ImageUrl" @bind-Value="resource.ImageUrl" class="form-control" />
    </div>
    <div class="form-group">
        <br />
        <button type="submit" class="btn btn-success">Create</button>
        <button type="reset" class="btn btn-secondary">Reset</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public ClaimsPrincipal User {get; set;}
    private ResourceCreateDTO resource = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var userAuthState = authState.User;
        var username = userAuthState.Claims.First(c => c.Type == "preferred_username").Value;
        var strings = username.Split("@");
        var user = await Http.GetFromJsonAsync<UserDetailsDTO>($"api/users/{strings[0]}");
        resource.User = new UserDTO{Id = user.Id, UserName = user.UserName};
    }

    private string TextParagraphs
    {
        get => string.Join(Environment.NewLine, resource.TextParagraphs);
        set => resource.TextParagraphs = value.Split(Environment.NewLine).Select(p => p.Trim()).Where(p => !string.IsNullOrWhiteSpace(p)).ToList();
    }

    private async Task<UserDTO> GetUserDTO(){
        var username = User.Claims.First(c => c.Type == "preferred_username").Value;
        var strings = username.Split("@");
        var user = await Http.GetFromJsonAsync<UserDetailsDTO>($"api/users/{strings[0]}");

        return new UserDTO{
            Id = user.Id,
            UserName = user.UserName
        };
    }

    private async Task HandleSubmit(){
        resource.User = await GetUserDTO();
        resource.Created = DateTime.Today;
        var editContext = new EditContext(resource);

        if (editContext != null && editContext.Validate()){
            await CreateNewResource();
            await Task.CompletedTask;
        }

    }

    private async Task CreateNewResource()
    {
        var response = await Http.PostAsJsonAsync("api/Resources", resource);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("i succeded");
            var created = await response.Content.ReadFromJsonAsync<int>();
            
            Console.WriteLine("created: " + created);

            var uri = $"{NavigationManager.BaseUri}resources/{created}";

            NavigationManager.NavigateTo(uri);
        }

        var addtouser = await Http.PutAsJsonAsync("api/users/", resource);
    }

    private void Cancel()
    {
        var uri = $"{NavigationManager.BaseUri}resources";

        NavigationManager.NavigateTo(uri);
    } 
} 

