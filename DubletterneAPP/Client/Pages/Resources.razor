@page "/resources"
@using Core
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Resources</PageTitle>

<form>
    <div class="search-field">
        <input  class="search-input" type="text" placeholder="Enter title of resource" asp-for="SearchString" />
        <input type="submit" value="Search" />
    </div>
</form>

<div class="modify-btns">
    <button class="btn btn-primary" @onclick="Create">New resource</button>
</div>

@if (resources == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th scope="col">Image</th>
            <th scope="col">Title</th>
            <th scope="col">Id</th>
            <th scope="col">User</th>
            <th scope="col">View</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var resource in resources)
        {
            <tr>
                <td>
                    <img src="https://nakedsecurity.sophos.com/wp-content/uploads/sites/2/2016/03/rickastley.jpg" alt="resource image" style="width:200px;" />
                </td>
                <td class="align-middle">
                    @resource.Title
                </td>
                <td class="align-middle">
                    @resource.Id
                </td>
                <td class="align-middle">
                    @resource.User.UserName
                </td>
                <td class="align-middle">
                    <button type="button" class="btn btn-info"  @onclick="@(() => View(resource))">View</button>
                </td>
            </tr>
         }
        </tbody>
    </table>
}

@code
{
    private ResourceDTO[]? resources;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            resources = await Http.GetFromJsonAsync<ResourceDTO[]>($"api/Resources");
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
            var list = Enumerable.Range(1, 5).Select(index => new ResourceDTO
            {
                Id = index,
                User = new UserDTO{
                    Id = index,
                    UserName = String.Format("User number {0}", index)
                },
                Title = String.Format("Title number {0}", index)
            })
            .ToArray();
            resources = list;
        }
    }

    private void View(ResourceDTO resource)
    {
        var uri = $"{NavigationManager.BaseUri}resources/{resource.Id}";

        NavigationManager.NavigateTo(uri);
    }

    private void Create()
    {
        var uri = $"{NavigationManager.BaseUri}resources/create";

        NavigationManager.NavigateTo(uri);
    }
}

<style>

    .search-field {
        display: flex;
        justify-content: center;
        padding: 20px;
        padding-top: 10px;
        max-width: 50%;
        margin-left: auto;
        margin-right: auto;
    }

    .search-input {
        width: 100%;
        height: 40px;
    }

    .modify-btns {
        display: flex;
        justify-content: left;
        padding: 20px;
        padding-top: 10px;
        max-width: 50%;
        margin-left: auto;
        margin-right: auto;
    }


</style>